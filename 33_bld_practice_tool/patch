From 3a3cbf80969271ee4df8650ac5e5f8de28183676 Mon Sep 17 00:00:00 2001
From: SansWord <sansword@gmail.com>
Date: Sun, 21 Sep 2025 08:18:52 -0700
Subject: [PATCH] init commit with working scramble and solution function

---
 READ.md    |   6 +
 index.html | 220 ++++++++++++++++
 script.js  | 876 +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 style.css  | 113 ++++++++
 4 files changed, 1215 insertions(+)

diff --git a/READ.md b/READ.md
new file mode 100644
index 0000000000000000000000000000000000000000..32084ef255b87443891053c995d5b156e283c897
--- /dev/null
+++ b/READ.md
@@ -0,0 +1,6 @@
+TODO
+
+0. upload to github page
+1. support Xw action
+2. color configurable
+3. buffer configurable
\ No newline at end of file
diff --git a/index.html b/index.html
new file mode 100644
index 0000000000000000000000000000000000000000..d166ebaedb7b47af70ab622ec3e24f97ac0b3df3
--- /dev/null
+++ b/index.html
@@ -0,0 +1,220 @@
+<!DOCTYPE html>
+<html lang="en" >
+<head>
+  <meta charset="UTF-8">
+  <title>Rubik's Cube | @sansword</title>
+  <meta name="viewport" content="width=device-width,height=device-height,user-scalable=no,initial-scale=1.0,maximum-scale=1.0,minimum-scale=1.0"><link rel="stylesheet" href="./style.css">
+
+</head>
+<body>
+  <p>BLD Practice Tool</p>
+
+  <table>
+    <tr>
+      <td>
+  <div id="cube">
+    <table>
+      <tr>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td id="U_C_1" class="up"></td>
+        <td id="U_E_1" class="up"></td>
+        <td id="U_C_2" class="up"></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+      </tr>
+      <tr>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td id="U_E_4" class="up"></td>
+        <td id="U_Center"   class="up"></td>
+        <td id="U_E_2" class="up"></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+      </tr>
+      <tr>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td id="U_C_4" class="up"></td>
+        <td id="U_E_3" class="up"></td>
+        <td id="U_C_3" class="up"></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+      </tr>
+
+      <tr>
+        <td id="L_C_1" class="left"></td>
+        <td id="L_E_1" class="left"></td>
+        <td id="L_C_2" class="left"></td>
+        <td id="F_C_1" class="front"></td>
+        <td id="F_E_1" class="front"></td>
+        <td id="F_C_2" class="front"></td>
+        <td id="R_C_1" class="right"></td>
+        <td id="R_E_1" class="right"></td>
+        <td id="R_C_2" class="right"></td>
+        <td id="B_C_1" class="back"></td>
+        <td id="B_E_1" class="back"></td>
+        <td id="B_C_2" class="back"></td>
+      </tr>
+
+      <tr>
+        <td id="L_E_4" class="left"></td>
+        <td id="L_Center"   class="left"></td>
+        <td id="L_E_2" class="left"></td>
+        <td id="F_E_4" class="front"></td>
+        <td id="F_Center"   class="front"></td>
+        <td id="F_E_2" class="front"></td>
+        <td id="R_E_4" class="right"></td>
+        <td id="R_Center"   class="right"></td>
+        <td id="R_E_2" class="right"></td>
+        <td id="B_E_4" class="back"></td>
+        <td id="B_Center"   class="back"></td>
+        <td id="B_E_2" class="back"></td>
+      </tr>
+
+      <tr>
+        <td id="L_C_4" class="left"></td>
+        <td id="L_E_3" class="left"></td>
+        <td id="L_C_3" class="left"></td>
+        <td id="F_C_4" class="front"></td>
+        <td id="F_E_3" class="front"></td>
+        <td id="F_C_3" class="front"></td>
+        <td id="R_C_4" class="right"></td>
+        <td id="R_E_3" class="right"></td>
+        <td id="R_C_3" class="right"></td>
+        <td id="B_C_4" class="back"></td>
+        <td id="B_E_3" class="back"></td>
+        <td id="B_C_3" class="back"></td>
+      </tr>
+
+      <tr>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td id="D_C_1" class="down"></td>
+        <td id="D_E_1" class="down"></td>
+        <td id="D_C_2" class="down"></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+      </tr>
+
+      <tr>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td id="D_E_4" class="down"></td>
+        <td id="D_Center"   class="down"></td>
+        <td id="D_E_2" class="down"></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+      </tr>
+
+      <tr>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td id="D_C_4" class="down"></td>
+        <td id="D_E_3" class="down"></td>
+        <td id="D_C_3" class="down"></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+        <td></td>
+      </tr>      
+
+    </table>
+  </div>
+
+      </td>
+      <td>
+        
+  <div id="input">
+    <div id="R">
+    <button onclick="rotateLayer('R', 1);"> R </button>
+    <button onclick="rotateLayer('R', 2);"> R2 </button>
+    <button onclick="rotateLayer('R', 3);"> R' </button>
+    </div>
+    <div id="L">
+    <button onclick="rotateLayer('L', 1);"> L </button>
+    <button onclick="rotateLayer('L', 2);"> L2 </button>
+    <button onclick="rotateLayer('L', 3);"> L' </button>
+    </div>
+    <div id="U">
+    <button onclick="rotateLayer('U', 1);"> U </button>
+    <button onclick="rotateLayer('U', 2);"> U2 </button>
+    <button onclick="rotateLayer('U', 3);"> U' </button>
+    </div>
+    <div id="D">
+    <button onclick="rotateLayer('D', 1);"> D </button>
+    <button onclick="rotateLayer('D', 2);"> D2 </button>
+    <button onclick="rotateLayer('D', 3);"> D' </button>
+    </div>
+    <div id="F">
+    <button onclick="rotateLayer('F', 1);"> F </button>
+    <button onclick="rotateLayer('F', 2);"> F2 </button>
+    <button onclick="rotateLayer('F', 3);"> F' </button>
+    </div>
+    <div id="B">
+    <button onclick="rotateLayer('B', 1);"> B </button>
+    <button onclick="rotateLayer('B', 2);"> B2 </button>
+    <button onclick="rotateLayer('B', 3);"> B' </button>
+    </div>
+    <div id="misc">
+    <button onclick="resetCube();"> Reset </button>
+
+    </div>
+  </div>
+      </td>
+    </tr>
+    <tr>
+      <td colspan="2">
+        <input type="text" id="scramble"
+          value="D'LUD2R'F2D2F2L2U2L2BF2L2D2R'D2F'L2U2"
+        />
+        <!-- L'D2R'F'D'R2B'DR'F2L2D2F'B'R2U2R2L'D2 -->
+        <button id="submitScramble" class="submit" onclick="submitScramble();"> submit scramble</button>
+      </td>
+    </tr>
+        <tr>
+      <td colspan="2">
+        <input type="text" id="solution"
+          value="VWHATNKREHBDQ,NSDBTBKOU"
+        />
+        <!-- TPDYWVBMEHNH,GOBEIPKR -->
+        <button id="submitSolution" class="submit" onclick="submitSolution();"> submit solution</button>
+      </td>
+    </tr>
+  </table>
+
+
+
+
+<script  src="./script.js"></script>
+
+</body>
+</html>
diff --git a/script.js b/script.js
new file mode 100644
index 0000000000000000000000000000000000000000..eae6d80249bbb4932eb143cf2f5d7fa4dd98f93b
--- /dev/null
+++ b/script.js
@@ -0,0 +1,876 @@
+faces = ["U", "D", "F", "B", "L", "R"];
+types = ["E", "C"];
+color_classes = ["up", "down", "left", "right", "front", "back"]
+
+cube_position = {
+  "edges": [
+    "UB",
+    "UR",
+    "UF",
+    "UL",
+    "FL",
+    "FR",
+    "BR",
+    "BL",
+    "DF",
+    "DR",
+    "DB",
+    "DL",
+  ],
+  "corners": [
+    "ULB",
+    "UBR",
+    "URF",
+    "UFL",
+    "DLF",
+    "DFR",
+    "DRB",
+    "DBL"
+  ]
+}
+
+cube_definition = {
+  // 12 edges with 0,1 orientation
+  "edges": [
+    {
+      "id": 0,
+      "faces": ["up", "back"]
+    },
+    {
+      "id": 1,
+      "faces": ["up", "right"]
+    },
+    {
+      "id": 2,
+      "faces": ["up", "front"]
+    },
+    {
+      "id": 3,
+      "faces": ["up", "left"]
+    },
+    {
+      "id": 4,
+      "faces": ["front", "left"]
+    },
+    {
+      "id": 5,
+      "faces": ["front", "right"]
+    },
+    {
+      "id": 6,
+      "faces": ["back", "right"]
+    },
+    {
+      "id": 7,
+      "faces": ["back", "left"]
+    },
+    {
+      "id": 8,
+      "faces": ["down", "front"]
+    },
+    {
+      "id": 9,
+      "faces": ["down", "right"]
+    },
+    {
+      "id": 10,
+      "faces": ["down", "back"]
+    },
+    {
+      "id": 11,
+      "faces": ["down", "left"]
+    }
+  ],
+  // 8 corners with 0,1,2 orientation
+  "corners": [
+    {
+      "id": 0,
+      "faces": ["up", "left", "back"]
+    },
+    {
+      "id": 1,
+      "faces": ["up", "back", "right"]
+    },
+    {
+      "id": 2,
+      "faces": ["up", "right", "front"]
+    },
+    {
+      "id": 3,
+      "faces": ["up", "front", "left"]
+    },
+    {
+      "id": 4,
+      "faces": ["down", "left", "front"]
+    },
+    {
+      "id": 5,
+      "faces": ["down", "front", "right"]
+    },
+    {
+      "id": 6,
+      "faces": ["down", "right", "back"]
+    },
+    {
+      "id": 7,
+      "faces": ["down", "back", "left"]
+    }
+  ],
+  // 6 centers with 0,1,2,3 orientation
+  "centers": [
+    {
+      "id": 0,
+      "faces": ["up", "up", "up", "up"]
+    },
+    {
+      "id": 1,
+      "faces": ["front", "front", "front", "front"]
+    },
+    {
+      "id": 2,
+      "faces": ["right", "right", "right", "right"]
+    },
+    {
+      "id": 3,
+      "faces": ["back", "back", "back", "back"]
+    },
+    {
+      "id": 4,
+      "faces": ["left", "left", "left", "left"]
+    },
+    {
+      "id": 5,
+      "faces": ["down", "down", "down", "down"]
+    }
+  ]
+}
+
+cube = {
+  // 12 edges with 0,1 orientation
+  "edges": [
+    {
+      "id": 0,
+      "orientation": 0
+    },
+    {
+      "id": 1,
+      "orientation": 0
+    },
+    {
+      "id": 2,
+      "orientation": 0
+    },
+    {
+      "id": 3,
+      "orientation": 0
+    },
+    {
+      "id": 4,
+      "orientation": 0
+    },
+    {
+      "id": 5,
+      "orientation": 0
+    },
+    {
+      "id": 6,
+      "orientation": 0
+    },
+    {
+      "id": 7,
+      "orientation": 0
+    },
+    {
+      "id": 8,
+      "orientation": 0
+    },
+    {
+      "id": 9,
+      "orientation": 0
+    },
+    {
+      "id": 10,
+      "orientation": 0
+    },
+    {
+      "id": 11,
+      "orientation": 0
+    }
+  ],
+  // 8 corners with 0,1,2 orientation
+  "corners": [
+    {
+      "id": 0,
+      "orientation": 0
+    },
+    {
+      "id": 1,
+      "orientation": 0
+    },
+    {
+      "id": 2,
+      "orientation": 0
+    },
+    {
+      "id": 3,
+      "orientation": 0
+    },
+    {
+      "id": 4,
+      "orientation": 0
+    },
+    {
+      "id": 5,
+      "orientation": 0
+    },
+    {
+      "id": 6,
+      "orientation": 0
+    },
+    {
+      "id": 7,
+      "orientation": 0
+    }
+  ],
+  // 6 centers with 0,1,2,3 orientation
+  "centers": [
+    {
+      "id": 0,
+      "orientation": 0
+    },
+    {
+      "id": 1,
+      "orientation": 0
+    },
+    {
+      "id": 2,
+      "orientation": 0
+    },
+    {
+      "id": 3,
+      "orientation": 0
+    },
+    {
+      "id": 4,
+      "orientation": 0
+    },
+    {
+      "id": 5,
+      "orientation": 0
+    }
+  ],
+}
+
+reset_cube = {
+  // 12 edges with 0,1 orientation
+  "edges": [
+    {
+      "id": 0,
+      "orientation": 0
+    },
+    {
+      "id": 1,
+      "orientation": 0
+    },
+    {
+      "id": 2,
+      "orientation": 0
+    },
+    {
+      "id": 3,
+      "orientation": 0
+    },
+    {
+      "id": 4,
+      "orientation": 0
+    },
+    {
+      "id": 5,
+      "orientation": 0
+    },
+    {
+      "id": 6,
+      "orientation": 0
+    },
+    {
+      "id": 7,
+      "orientation": 0
+    },
+    {
+      "id": 8,
+      "orientation": 0
+    },
+    {
+      "id": 9,
+      "orientation": 0
+    },
+    {
+      "id": 10,
+      "orientation": 0
+    },
+    {
+      "id": 11,
+      "orientation": 0
+    }
+  ],
+  // 8 corners with 0,1,2 orientation
+  "corners": [
+    {
+      "id": 0,
+      "orientation": 0
+    },
+    {
+      "id": 1,
+      "orientation": 0
+    },
+    {
+      "id": 2,
+      "orientation": 0
+    },
+    {
+      "id": 3,
+      "orientation": 0
+    },
+    {
+      "id": 4,
+      "orientation": 0
+    },
+    {
+      "id": 5,
+      "orientation": 0
+    },
+    {
+      "id": 6,
+      "orientation": 0
+    },
+    {
+      "id": 7,
+      "orientation": 0
+    }
+  ],
+  // 6 centers with 0,1,2,3 orientation
+  "centers": [
+    {
+      "id": 0,
+      "orientation": 0
+    },
+    {
+      "id": 1,
+      "orientation": 0
+    },
+    {
+      "id": 2,
+      "orientation": 0
+    },
+    {
+      "id": 3,
+      "orientation": 0
+    },
+    {
+      "id": 4,
+      "orientation": 0
+    },
+    {
+      "id": 5,
+      "orientation": 0
+    }
+  ],
+}
+
+function testExistence() {
+  for (var i = 0; i < faces.length; i++) {
+    for (var j = 0; j < types.length; j++) {
+      for (var k = 1; k <= 4; k++) {
+        var id = faces[i] + "_" + types[j] + "_" + k;
+        console.log(document.getElementById(id) == undefined)
+      }
+    }
+  }
+
+  for (var i = 0; i < faces.length; i++) {
+    var id = faces[i] + "_Center";
+    console.log(document.getElementById(id) == undefined)
+  }
+}
+
+function clearColorClasses(elm) {
+  for (var i = 0; i < color_classes.length; i++) {
+    elm.classList.remove(color_classes[i]);
+  }
+}
+
+function clearCube() {
+  for (var i = 0; i < faces.length; i++) {
+    for (var j = 0; j < types.length; j++) {
+      for (var k = 1; k <= 4; k++) {
+        var id = faces[i] + "_" + types[j] + "_" + k;
+        clearColorClasses(document.getElementById(id))
+      }
+    }
+  }
+
+  for (var i = 0; i < faces.length; i++) {
+    var id = faces[i] + "_Center";
+    clearColorClasses(document.getElementById(id))
+  }
+}
+
+function renderCenters() {
+  center_faces = ["U", "F", "R", "B", "L", "D"];
+  centers = cube.centers;
+  for (var i = centers.length - 1; i >= 0; i--) {
+    getFace(center_faces[i],"Center").classList = cube_definition.centers[centers[i].id].faces[centers[i].orientation]
+  }
+}
+
+function renderEdges() {
+  edges = cube.edges;
+
+  edge_faces = [
+    ["U", "B"],
+    ["U", "R"],
+    ["U", "F"],
+    ["U", "L"],
+    ["F", "L"],
+    ["F", "R"],
+    ["B", "R"],
+    ["B", "L"],
+    ["D", "F"],
+    ["D", "R"],
+    ["D", "B"],
+    ["D", "L"],
+  ]
+  edge_nums = [
+    [1,1],
+    [2,1],
+    [3,1],
+    [4,1],
+
+    [4,2],
+    [2,4],
+    [4,2],
+    [2,4],
+
+    [1,3],
+    [2,3],
+    [3,3],
+    [4,3],
+  ]
+  for (var i = 0; i < edges.length; i++) {
+    //console.log("--")
+    for (var j = 0; j < 2; j ++) {
+      //console.log(cube_definition.edges[edges[i].id].faces[(edges[i].orientation + j)%2])
+      getFace(edge_faces[i][j], "E", edge_nums[i][j]).classList = cube_definition.edges[edges[i].id].faces[(edges[i].orientation + j)%2]
+    }
+  }
+}
+
+function renderCorners() {
+  corners = cube.corners;
+
+  corner_faces = [
+    ["U", "L", "B"],
+    ["U", "B", "R"],
+    ["U", "R", "F"],
+    ["U", "F", "L"],
+
+    ["D", "L", "F"],
+    ["D", "F", "R"],
+    ["D", "R", "B"],
+    ["D", "B", "L"]
+  ]
+  corner_nums = [
+    [1,1,2],
+    [2,1,2],
+    [3,1,2],
+    [4,1,2],
+
+    [1,3,4],
+    [2,3,4],
+    [3,3,4],
+    [4,3,4]
+  ]
+  for (var i = 0; i < corners.length; i++) {
+    //console.log("-- " + i)
+    for (var j = 0; j < 3; j ++) {
+      //console.log(cube_definition.corners[corners[i].id].faces[(corners[i].orientation + j)%3])
+      var corner = getFace(corner_faces[i][j], "C", corner_nums[i][j]);
+      //console.log(corner)
+      corner.classList = cube_definition.corners[corners[i].id].faces[(corners[i].orientation + j)%3]
+    }
+  }
+
+
+}
+
+function renderCube() {
+  clearCube();
+  renderCenters();
+  renderCorners();
+  renderEdges();
+}
+
+function getFace(face, type, num) {
+  if (type == "Center") {
+    id = face + "_Center";
+  } else {
+    id = face + "_" + type + "_" + num;
+  }
+
+  //console.log("getting face:" + id);
+
+  return document.getElementById(id);
+}
+
+renderCube()
+
+function rotateLayer(layer, times /*1, 2, 3*/) {
+  for(var i = 0; i < times; i++) {
+    rotateLayerOnce(layer);
+  }
+  clearCube();
+  renderCube();
+}
+
+function rotateLayerOnce(layer) {
+  //center_faces = ["U", "F", "R", "B", "L", "D"];
+  rotateEdgeOnce(layer);
+  rotateCornerOnce(layer);
+  rotateCenterOnce(layer);
+}
+
+function rotateEdgeOnce(layer) {
+  var flip = false;
+  switch (layer) {
+    case "U": // 0,1,2,3, done
+      var movingIds = [0,1,2,3];
+      break;
+    case "L": // 3,4,11,7, done
+      var movingIds = [3,4,11,7];
+      break;
+    case "F": // 2,5,8,4, done
+      var movingIds = [2,5,8,4];
+      var flip = true;
+      break;
+    case "R": //1,6,9,5, done
+      var movingIds = [1,6,9,5];
+      break;
+    case "B": //
+      var movingIds = [0,7,10,6];
+      var flip = true;
+      break;
+    case "D": // 8,9,10,11, done
+      var movingIds = [8,9,10,11];
+      break;
+  }
+  var movingEdges = [
+    cube.edges[movingIds[0]],
+    cube.edges[movingIds[1]],
+    cube.edges[movingIds[2]],
+    cube.edges[movingIds[3]],
+  ];
+  cube.edges[movingIds[0]] = movingEdges[3];
+  cube.edges[movingIds[1]] = movingEdges[0];
+  cube.edges[movingIds[2]] = movingEdges[1];
+  cube.edges[movingIds[3]] = movingEdges[2];
+  if (flip) {
+    flipEdges(layer);
+  }
+}
+
+function flipEdges(layer) {
+  switch (layer) {
+    case "F": // 2,5,8,4
+      flipEdge(cube.edges[2], 1);
+      flipEdge(cube.edges[5], 1);
+      flipEdge(cube.edges[8], 1);
+      flipEdge(cube.edges[4], 1);
+      break;
+    case "B": // 0,7,10,6
+      flipEdge(cube.edges[0], 1);
+      flipEdge(cube.edges[7], 1);
+      flipEdge(cube.edges[10], 1);
+      flipEdge(cube.edges[6], 1);
+      break;
+  }
+}
+
+function rotateCornerOnce(layer) {
+  var flip = false;
+  switch (layer) {
+    case "U": // 0,1,2,3, done
+      var movingIds = [0,1,2,3];
+      break;
+    case "L": // 0,3,4,7
+      var movingIds = [0,3,4,7];
+      var flip = true;
+      break;
+    case "F": // 3,2,5,4, done
+      var movingIds = [3,2,5,4];
+      var flip = true;
+      break;
+    case "R": // 2,1,6,5, done
+      var movingIds = [2,1,6,5];
+      var flip = true;
+      break;
+    case "B": // 1,0,7,6
+      var movingIds = [1,0,7,6];
+      var flip = true;
+      break;
+    case "D": // 4,5,6,7, done
+      var movingIds = [4,5,6,7];
+      break;
+  }
+  var movingCorners = [
+    cube.corners[movingIds[0]],
+    cube.corners[movingIds[1]],
+    cube.corners[movingIds[2]],
+    cube.corners[movingIds[3]],
+  ];
+  cube.corners[movingIds[0]] = movingCorners[3];
+  cube.corners[movingIds[1]] = movingCorners[0];
+  cube.corners[movingIds[2]] = movingCorners[1];
+  cube.corners[movingIds[3]] = movingCorners[2];
+  if (flip) {
+    //console.log("handle flipping");
+    flipCorners(layer);
+  }
+}
+
+function flipCorners(layer) {
+  switch (layer) {
+    case "R": // 2,1,6,5
+      flipCorner(cube.corners[2], 1);
+      flipCorner(cube.corners[1], 2);
+      flipCorner(cube.corners[6], 1);
+      flipCorner(cube.corners[5], 2);
+      break;
+
+    case "F": // 3,2,5,4
+      flipCorner(cube.corners[3], 1);
+      flipCorner(cube.corners[2], 2);
+      flipCorner(cube.corners[5], 1);
+      flipCorner(cube.corners[4], 2);
+      break;
+
+    case "L": // 0,3,4,7
+      flipCorner(cube.corners[0], 1);
+      flipCorner(cube.corners[3], 2);
+      flipCorner(cube.corners[4], 1);
+      flipCorner(cube.corners[7], 2);
+      break;
+
+    case "B": // 1,0,7,6
+      flipCorner(cube.corners[1], 1);
+      flipCorner(cube.corners[0], 2);
+      flipCorner(cube.corners[7], 1);
+      flipCorner(cube.corners[6], 2);
+      break;
+
+  }
+}
+
+function rotateCenterOnce(layer) {
+  //center_faces = ["U", "F", "R", "B", "L", "D"];
+  center_idxs = {
+    "U": 0,
+    "F": 1,
+    "R": 2,
+    "B": 3,
+    "L": 4,
+    "D": 5
+  }
+  var center_idx = center_idxs[layer];
+  var center_orientation = cube.centers[center_idx].orientation
+  //console.log("before:" + center_orientation);
+  cube.centers[center_idx].orientation = (center_orientation + 1) % 4;
+  //console.log("after:" + cube.centers[center_idx].orientation)
+}
+
+function resetCube() {
+  cube = JSON.parse(JSON.stringify(reset_cube));
+  renderCube();
+}
+
+function submitScramble() {
+  const reg = /(?:[LRUDFB]2?'?)/gm;
+
+  var scramble = document.getElementById("scramble").value.toUpperCase();
+  console.log("receving scrambe: " + scramble);
+  resetCube();
+
+  if (!scramble) {
+    return
+  }
+
+  //const testScramble = "RL2FB2R'U2R'D'LB2U'F2D2B2R2U2R2UR";
+  //scramble = testScramble;
+  var operations = scramble.match(reg)
+  for (var i = 0; i < operations.length; i++) {
+    var operation = operations[i];
+    if (operation.length == 1) {
+      layer = operation
+      var times = 1
+    } else {
+      var times = operation[1] == "2" ? 2 : 3;
+      layer = operation[0];
+    }
+    rotateLayer(layer, times)
+  }
+
+}
+
+function submitSolution() {
+  var solution = document.getElementById("solution").value.toUpperCase();
+  console.log("receving solution: " + solution);
+
+  if (!solution) {
+    return
+  }
+
+  var edge_encoding = solution.split(",")[0];
+  var corner_encoding = solution.split(",")[1];
+  console.log("receving encodings: [" + edge_encoding + "], [" + corner_encoding + "]");
+  handleEdgeEncoding(edge_encoding);
+  handleCornerEncoding(corner_encoding);
+  renderCube();
+}
+
+function handleEdgeEncoding(encoding) {
+  if (!encoding) {
+    return;
+  }
+  console.log("handle edge with encoding: " + encoding)
+  //A-Y
+  // moving buffer (UD) with target
+  var targets = {
+    // id, orientation
+    "A": [ 0, 0],
+    "B": [ 1, 0],
+    "C": [ 2, 0],
+    "D": [ 3, 0],
+
+    "E": [ 2, 1],
+    "F": [ 5, 0],
+    "G": [ 8, 1],
+    "H": [ 4, 0],
+
+    "I": [ 3, 1],
+    "J": [ 4, 1],
+    "K": [11, 1],
+    "L": [ 7, 1],
+
+    "M": [ 0, 1],
+    "N": [ 7, 0],
+    "O": [10, 1],
+    "P": [ 6, 0],
+
+    "Q": [ 1, 1],
+    "R": [ 6, 1],
+    "S": [ 9, 1],
+    "T": [ 5, 1],
+
+    "U": [ 8, 0],
+    "V": [ 9, 0],
+    "W": [10, 0],
+    "Y": [11, 0]
+  }
+
+  // swaping 8 and target with orientation
+  var buffer = 8
+  for (var i = 0; i < encoding.length; i++) {
+    var target = targets[encoding.charAt(i)];
+
+    if (i%2 == 1) {
+      // odd mode, handle C/E, W,O
+      switch(target) {
+        case "C":
+          target = "E"
+          break;
+        case "E":
+          target = "C"
+          break;
+        case "W":
+          target = "O"
+          break;
+        case "O":
+          target = "W"
+          break;
+      }
+    }
+
+    console.log(target);
+    var targetId = target[0];
+    var orientation = target[1];
+    var tmp = cube.edges[buffer];
+    cube.edges[buffer] = cube.edges[targetId];
+    cube.edges[targetId] = tmp;
+    flipEdge(cube.edges[buffer], orientation);
+    flipEdge(cube.edges[targetId], orientation);
+  }
+
+}
+
+function handleCornerEncoding(encoding) {
+  if (!encoding) {
+    return;
+  }
+  console.log("handle corner with encoding: " + encoding)
+  //A-Y
+  // moving buffer (UFR) with target
+  var targets = {
+    // id, orientation
+    "A": [0, 0],
+    "B": [1, 0],
+    "C": [2, 0],
+    "D": [3, 0],
+    "E": [3, 1],
+    "F": [2, 2],
+    "G": [5, 1],
+    "H": [4, 2],
+    "I": [0, 1],
+    "J": [3, 2],
+    "K": [4, 1],
+    "L": [7, 2],
+    "M": [1, 1],
+    "N": [0, 2],
+    "O": [7, 1],
+    "P": [6, 2],
+    "Q": [2, 1],
+    "R": [1, 2],
+    "S": [6, 1],
+    "T": [5, 2],
+    "U": [4, 0],
+    "V": [5, 0],
+    "W": [6, 0],
+    "Y": [7, 0]
+  }
+
+  // swaping 2 and target with orientation
+  
+  for (var i = 0; i < encoding.length; i++) {
+    //var buffer = i%2 == 0 ? 2 : 1;
+    buffer = 2;
+    var target = targets[encoding.charAt(i)];
+    console.log(target);
+    var targetId = target[0];
+    var orientation = target[1];
+
+    //swap targetId with buffer
+    var tmp = cube.corners[buffer];
+    cube.corners[buffer] = cube.corners[targetId];
+    cube.corners[targetId] = tmp;
+
+    flipCorner(cube.corners[buffer], orientation);
+    flipCorner(cube.corners[targetId], -orientation);
+  }
+
+}
+
+function flipEdge(edge, orientation) {
+  edge.orientation = (edge.orientation + orientation) % 2;
+}
+
+function flipCorner(corner, orientation) {
+  corner.orientation = (corner.orientation + orientation + 3) % 3;
+}
\ No newline at end of file
diff --git a/style.css b/style.css
new file mode 100644
index 0000000000000000000000000000000000000000..b5a72d6ef39b14b095c9d0011d055f071b9cd1b4
--- /dev/null
+++ b/style.css
@@ -0,0 +1,113 @@
+:root {
+  --rubiks-up: #FFFFFF; /* White */
+  --rubiks-down: #FFD500; /* Cyber Yellow */
+  --rubiks-right: #B90000;   /* UE Red */
+  --rubiks-left: #FF5900; /* Pantone Orange */
+  --rubiks-back: #0045AD;  /* Cobalt Blue */
+  --rubiks-front: #009B48; /* Pigment Green */
+  --rubiks-background: black;
+}
+
+@font-face {
+  font-family: "BungeeFont";
+  font-weight: normal;
+  font-style: normal;
+  src: url("data:font/truetype;charset=utf-8;base64,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") format("woff2"), url("data:font/truetype;charset=utf-8;base64,") format("woff");
+}
+*, *:before, *:after {
+  -webkit-user-select: none;
+  -moz-user-select: none;
+  user-select: none;
+  box-sizing: border-box;
+  cursor: inherit;
+  margin: 0;
+  padding: 0;
+  outline: none;
+  font-size: inherit;
+  font-family: inherit;
+  font-weight: inherit;
+  font-style: inherit;
+  text-transform: uppercase;
+}
+*:focus {
+  outline: none;
+}
+
+html {
+  -webkit-tap-highlight-color: transparent;
+  -webkit-text-size-adjust: 100%;
+  -webkit-font-smoothing: antialiased;
+  -moz-osx-font-smoothing: grayscale;
+  -ms-text-size-adjust: 100%;
+  -webkit-text-size-adjust: 100%;
+  overflow: hidden;
+  height: 100%;
+}
+
+body {
+  font-family: "BungeeFont", sans-serif;
+  font-weight: normal;
+  font-style: normal;
+  line-height: 1;
+  cursor: default;
+  overflow: hidden;
+  height: 100%;
+  font-size: 5rem;
+}
+
+
+#cube td {
+  width: 50px;
+  height: 50px;
+  background: var(--rubiks-background);
+  border: 1px solid var(--rubiks-background);
+}
+
+#cube {
+  padding: 5px;
+  background: var(--rubiks-background);
+  float: left;
+}
+
+
+#cube td.up {
+  background-color: var(--rubiks-up);
+}
+
+#cube td.down {
+  background-color: var(--rubiks-down);
+}
+
+#cube td.left {
+  background-color: var(--rubiks-left);
+}
+
+#cube td.right {
+  background-color: var(--rubiks-right);
+}
+
+#cube td.front {
+  background-color: var(--rubiks-front);
+}
+
+#cube td.back {
+  background-color: var(--rubiks-back);
+}
+
+table button {
+  font-size: 30px;
+  width: 120px;
+}
+
+button.submit {
+  font-size: 20px;
+  width: 220px;
+}
+input {
+  font-size: 20px;
+  width: 70%;
+  text-align: center;
+}
+
+
+

From dc4d3c673853472ef2253e47713efd6f8693b503 Mon Sep 17 00:00:00 2001
From: SansWord <sansword@gmail.com>
Date: Wed, 24 Sep 2025 21:13:10 -0700
Subject: [PATCH] support rotate middle layer and whole cube

---
 script.js | 104 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 104 insertions(+)

diff --git a/script.js b/script.js
index eae6d80249bbb4932eb143cf2f5d7fa4dd98f93b..58673c16e439fcf3bdeea9931169d956817d7a3c 100644
--- a/script.js
+++ b/script.js
@@ -3,6 +3,14 @@ types = ["E", "C"];
 color_classes = ["up", "down", "left", "right", "front", "back"]
 
 cube_position = {
+  "centers": [
+    "U",
+    "F",
+    "R",
+    "B",
+    "L",
+    "D",
+  ],
   "edges": [
     "UB",
     "UR",
@@ -687,6 +695,102 @@ function rotateCenterOnce(layer) {
   //console.log("after:" + cube.centers[center_idx].orientation)
 }
 
+function rotateMiddleLayer(layer, times /*1, 2, 3*/) {
+  for(var i = 0; i < times; i++) {
+    rotateMiddleLayerOnce(layer);
+  }
+  clearCube();
+  renderCube();
+}
+
+function rotateMiddleLayerOnce(layer) {
+  //center_faces = ["U", "F", "R", "B", "L", "D"];
+  var flip = false;
+  switch (layer) {
+    case "X": // R
+      var movingCenterIds = [0,3,5,1];
+      var movingEdgeIds = [2,0,10,8];
+      break;
+    case "Y": // U
+      var movingCenterIds = [1,4,3,2];
+      var movingEdgeIds = [5,4,7,6];
+      break;
+    case "Z": // F
+      var movingCenterIds = [0,2,5,4];
+      var movingEdgeIds = [3,1,9,11];
+      break;
+  }
+  var movingCenters = [
+    cube.centers[movingCenterIds[0]],
+    cube.centers[movingCenterIds[1]],
+    cube.centers[movingCenterIds[2]],
+    cube.centers[movingCenterIds[3]],
+  ];
+  cube.centers[movingCenterIds[0]] = movingCenters[3];
+  cube.centers[movingCenterIds[1]] = movingCenters[0];
+  cube.centers[movingCenterIds[2]] = movingCenters[1];
+  cube.centers[movingCenterIds[3]] = movingCenters[2];
+
+  var movingEdges = [
+    cube.edges[movingEdgeIds[0]],
+    cube.edges[movingEdgeIds[1]],
+    cube.edges[movingEdgeIds[2]],
+    cube.edges[movingEdgeIds[3]],
+  ];
+  cube.edges[movingEdgeIds[0]] = movingEdges[3];
+  cube.edges[movingEdgeIds[1]] = movingEdges[0];
+  cube.edges[movingEdgeIds[2]] = movingEdges[1];
+  cube.edges[movingEdgeIds[3]] = movingEdges[2];
+
+  for (let i = 0; i < 4; i++) {
+    movingEdges[i].orientation = (movingEdges[i].orientation + 1) % 2;
+  }
+
+}
+
+function rotateCube(layer, times /*1, 2, 3*/) {
+  for(var i = 0; i < times; i++) {
+    rotateCubeOnce(layer);
+  }
+  clearCube();
+  renderCube();
+}
+
+function rotateCubeOnce(layer) {
+  switch (layer) {
+    case "U":
+      rotateLayer("U", 1);
+      rotateMiddleLayer("Y", 1);
+      rotateLayer("D", 3);
+      break;
+    case "L":
+      rotateLayer("L", 1);
+      rotateMiddleLayer("X", 3);
+      rotateLayer("R", 3);
+      break;
+    case "F":
+      rotateLayer("F", 1);
+      rotateMiddleLayer("Z", 1);
+      rotateLayer("B", 3);
+      break;
+    case "R":
+      rotateLayer("R", 1);
+      rotateMiddleLayer("X", 1);
+      rotateLayer("L", 3);
+      break;
+    case "B":
+      rotateLayer("B", 1);
+      rotateMiddleLayer("Z", 3);
+      rotateLayer("F", 3);
+      break;
+    case "D":
+      rotateLayer("D", 1);
+      rotateMiddleLayer("Y", 3);
+      rotateLayer("U", 3);
+      break;
+  }
+} 
+
 function resetCube() {
   cube = JSON.parse(JSON.stringify(reset_cube));
   renderCube();

From 88df23a881290391ac4f8b99184f8efdb969a292 Mon Sep 17 00:00:00 2001
From: SansWord <sansword@gmail.com>
Date: Wed, 24 Sep 2025 21:25:49 -0700
Subject: [PATCH] support widle layer in scramble pattern

---
 script.js | 65 +++++++++++++++++++++++++++++++++++++++++++++++----------------
 style.css |  2 +-
 2 files changed, 50 insertions(+), 17 deletions(-)

diff --git a/script.js b/script.js
index 58673c16e439fcf3bdeea9931169d956817d7a3c..a1c9fdc8636a930605494b8100801da106cb910c 100644
--- a/script.js
+++ b/script.js
@@ -707,18 +707,30 @@ function rotateMiddleLayerOnce(layer) {
   //center_faces = ["U", "F", "R", "B", "L", "D"];
   var flip = false;
   switch (layer) {
-    case "X": // R
+    case "R": // R
       var movingCenterIds = [0,3,5,1];
       var movingEdgeIds = [2,0,10,8];
       break;
-    case "Y": // U
+    case "L": // L
+      var movingCenterIds = [0,1,5,3];
+      var movingEdgeIds = [2,8,10,0];
+      break;
+    case "U": // U
       var movingCenterIds = [1,4,3,2];
       var movingEdgeIds = [5,4,7,6];
       break;
-    case "Z": // F
+    case "D": // D
+      var movingCenterIds = [1,2,3,4];
+      var movingEdgeIds = [5,6,7,4];
+      break;
+    case "F": // F
       var movingCenterIds = [0,2,5,4];
       var movingEdgeIds = [3,1,9,11];
       break;
+    case "B": // B
+      var movingCenterIds = [0,4,5,2];
+      var movingEdgeIds = [3,11,9,1];
+      break;
   }
   var movingCenters = [
     cube.centers[movingCenterIds[0]],
@@ -760,32 +772,32 @@ function rotateCubeOnce(layer) {
   switch (layer) {
     case "U":
       rotateLayer("U", 1);
-      rotateMiddleLayer("Y", 1);
+      rotateMiddleLayer("U", 1);
       rotateLayer("D", 3);
       break;
     case "L":
       rotateLayer("L", 1);
-      rotateMiddleLayer("X", 3);
+      rotateMiddleLayer("L", 1);
       rotateLayer("R", 3);
       break;
     case "F":
       rotateLayer("F", 1);
-      rotateMiddleLayer("Z", 1);
+      rotateMiddleLayer("F", 1);
       rotateLayer("B", 3);
       break;
     case "R":
       rotateLayer("R", 1);
-      rotateMiddleLayer("X", 1);
+      rotateMiddleLayer("R", 1);
       rotateLayer("L", 3);
       break;
     case "B":
       rotateLayer("B", 1);
-      rotateMiddleLayer("Z", 3);
+      rotateMiddleLayer("B", 1);
       rotateLayer("F", 3);
       break;
     case "D":
       rotateLayer("D", 1);
-      rotateMiddleLayer("Y", 3);
+      rotateMiddleLayer("D", 1);
       rotateLayer("U", 3);
       break;
   }
@@ -797,7 +809,7 @@ function resetCube() {
 }
 
 function submitScramble() {
-  const reg = /(?:[LRUDFB]2?'?)/gm;
+  const reg = /(?:[LRUDFB]W?2?'?)/gm;
 
   var scramble = document.getElementById("scramble").value.toUpperCase();
   console.log("receving scrambe: " + scramble);
@@ -812,16 +824,37 @@ function submitScramble() {
   var operations = scramble.match(reg)
   for (var i = 0; i < operations.length; i++) {
     var operation = operations[i];
-    if (operation.length == 1) {
-      layer = operation
-      var times = 1
+    handleScrambleOperation(operation);
+  }
+
+}
+
+function handleScrambleOperation(operation) {
+  // operation: [UDLRFB]w?[2']? 
+  if (operation.length == 1) {
+    layer = operation
+    var times = 1
+    var wide = false;
+  } else if (operation.length == 3){
+    var times = operation[2] == "2" ? 2 : 3;
+    layer = operation[0];
+    var wide = true;
+  } else {
+    // [UDLRFB]w or [UDLRFB][2']?
+    if (operation[1] == 'W') {
+      times = 1;
+      wide = true;
+      layer = operation[0];
     } else {
-      var times = operation[1] == "2" ? 2 : 3;
       layer = operation[0];
+      wide = false;
+      var times = operation[2] == "2" ? 2 : 3;
     }
-    rotateLayer(layer, times)
   }
-
+  rotateLayer(layer, times)
+  if (wide) {
+    rotateMiddleLayer(layer, times);
+  }
 }
 
 function submitSolution() {
diff --git a/style.css b/style.css
index b5a72d6ef39b14b095c9d0011d055f071b9cd1b4..0feb8c9dadeadeb76a4e7b8f1fbe35f6b6f1aa19 100644
--- a/style.css
+++ b/style.css
@@ -27,7 +27,7 @@
   font-family: inherit;
   font-weight: inherit;
   font-style: inherit;
-  text-transform: uppercase;
+  /*text-transform: uppercase;*/
 }
 *:focus {
   outline: none;

From c95ea6cb2c8debf9ed2dbfabed38b6ead4900e9f Mon Sep 17 00:00:00 2001
From: SansWord <sansword@gmail.com>
Date: Wed, 24 Sep 2025 22:07:08 -0700
Subject: [PATCH] add buttons to rotate wide layer, whole cube and reset cube
 orientation

---
 index.html | 38 ++++++++++++++++++++++---
 script.js  | 96 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++------
 style.css  |  5 ++++
 3 files changed, 127 insertions(+), 12 deletions(-)

diff --git a/index.html b/index.html
index d166ebaedb7b47af70ab622ec3e24f97ac0b3df3..5c94ed3965534f1bd4ce841c5d88b94e0d1355f1 100644
--- a/index.html
+++ b/index.html
@@ -145,7 +145,18 @@
         <td></td>
         <td></td>
         <td></td>
-      </tr>      
+      </tr>
+      <tr>
+        <td colspan="12" style="color:white;font-size:15px">
+          Orientation:
+        <button class="orientation" onclick="rotateCube('U', 1);"> U </button>
+        <button class="orientation" onclick="rotateCube('D', 1);"> D </button>
+        <button class="orientation" onclick="rotateCube('L', 1);"> L </button>
+        <button class="orientation" onclick="rotateCube('R', 1);"> R </button>
+        <button class="orientation" onclick="rotateCube('F', 1);"> F </button>
+        <button class="orientation" onclick="rotateCube('B', 1);"> B </button>
+        </td>
+      </tr>
 
     </table>
   </div>
@@ -158,34 +169,53 @@
     <button onclick="rotateLayer('R', 1);"> R </button>
     <button onclick="rotateLayer('R', 2);"> R2 </button>
     <button onclick="rotateLayer('R', 3);"> R' </button>
+    <button onclick="rotateLayer('R', 1, true);"> Rw </button>
+    <button onclick="rotateLayer('R', 2, true);"> Rw2 </button>
+    <button onclick="rotateLayer('R', 3, true);"> Rw' </button>
     </div>
     <div id="L">
     <button onclick="rotateLayer('L', 1);"> L </button>
     <button onclick="rotateLayer('L', 2);"> L2 </button>
     <button onclick="rotateLayer('L', 3);"> L' </button>
+    <button onclick="rotateLayer('L', 1, true);"> Lw </button>
+    <button onclick="rotateLayer('L', 2, true);"> Lw2 </button>
+    <button onclick="rotateLayer('L', 3, true);"> Lw' </button>
     </div>
     <div id="U">
     <button onclick="rotateLayer('U', 1);"> U </button>
     <button onclick="rotateLayer('U', 2);"> U2 </button>
     <button onclick="rotateLayer('U', 3);"> U' </button>
+    <button onclick="rotateLayer('U', 1, true);"> Uw </button>
+    <button onclick="rotateLayer('U', 2, true);"> Uw2 </button>
+    <button onclick="rotateLayer('U', 3, true);"> Uw' </button>
     </div>
     <div id="D">
     <button onclick="rotateLayer('D', 1);"> D </button>
     <button onclick="rotateLayer('D', 2);"> D2 </button>
     <button onclick="rotateLayer('D', 3);"> D' </button>
+    <button onclick="rotateLayer('D', 1, true);"> Dw </button>
+    <button onclick="rotateLayer('D', 2, true);"> Dw2 </button>
+    <button onclick="rotateLayer('D', 3, true);"> Dw' </button>
     </div>
     <div id="F">
     <button onclick="rotateLayer('F', 1);"> F </button>
     <button onclick="rotateLayer('F', 2);"> F2 </button>
     <button onclick="rotateLayer('F', 3);"> F' </button>
+    <button onclick="rotateLayer('F', 1, true);"> Fw </button>
+    <button onclick="rotateLayer('F', 2, true);"> Fw2 </button>
+    <button onclick="rotateLayer('F', 3, true);"> Fw' </button>
     </div>
     <div id="B">
     <button onclick="rotateLayer('B', 1);"> B </button>
     <button onclick="rotateLayer('B', 2);"> B2 </button>
     <button onclick="rotateLayer('B', 3);"> B' </button>
+    <button onclick="rotateLayer('B', 1, true);"> Bw </button>
+    <button onclick="rotateLayer('B', 2, true);"> Bw2 </button>
+    <button onclick="rotateLayer('B', 3, true);"> Bw' </button>
     </div>
     <div id="misc">
     <button onclick="resetCube();"> Reset </button>
+    <button onclick="resetCubeOrientation();" style="width: 280px"> Reset Orientation</button>
 
     </div>
   </div>
@@ -194,10 +224,10 @@
     <tr>
       <td colspan="2">
         <input type="text" id="scramble"
-          value="D'LUD2R'F2D2F2L2U2L2BF2L2D2R'D2F'L2U2"
+          value="D'LUD2R'F2D2F2L2U2L2BF2L2D2R'D2F'Rw2Uw2"
         />
         <!-- L'D2R'F'D'R2B'DR'F2L2D2F'B'R2U2R2L'D2 -->
-        <button id="submitScramble" class="submit" onclick="submitScramble();"> submit scramble</button>
+        <button id="submitScramble" class="submit" onclick="submitScramble();"> Submit Scramble</button>
       </td>
     </tr>
         <tr>
@@ -206,7 +236,7 @@
           value="VWHATNKREHBDQ,NSDBTBKOU"
         />
         <!-- TPDYWVBMEHNH,GOBEIPKR -->
-        <button id="submitSolution" class="submit" onclick="submitSolution();"> submit solution</button>
+        <button id="submitSolution" class="submit" onclick="submitSolution();"> Submit Solution</button>
       </td>
     </tr>
   </table>
diff --git a/script.js b/script.js
index a1c9fdc8636a930605494b8100801da106cb910c..92a62c47016a23acac412ab8e297aa16cf50c0fc 100644
--- a/script.js
+++ b/script.js
@@ -532,9 +532,12 @@ function getFace(face, type, num) {
 
 renderCube()
 
-function rotateLayer(layer, times /*1, 2, 3*/) {
+function rotateLayer(layer, times /*1, 2, 3*/, wide) {
   for(var i = 0; i < times; i++) {
     rotateLayerOnce(layer);
+    if (wide) {
+      rotateMiddleLayerOnce(layer);
+    }
   }
   clearCube();
   renderCube();
@@ -848,13 +851,10 @@ function handleScrambleOperation(operation) {
     } else {
       layer = operation[0];
       wide = false;
-      var times = operation[2] == "2" ? 2 : 3;
+      var times = operation[1] == "2" ? 2 : 3;
     }
   }
-  rotateLayer(layer, times)
-  if (wide) {
-    rotateMiddleLayer(layer, times);
-  }
+  rotateLayer(layer, times, wide);
 }
 
 function submitSolution() {
@@ -868,11 +868,60 @@ function submitSolution() {
   var edge_encoding = solution.split(",")[0];
   var corner_encoding = solution.split(",")[1];
   console.log("receving encodings: [" + edge_encoding + "], [" + corner_encoding + "]");
+  resetCubeOrientation();
   handleEdgeEncoding(edge_encoding);
   handleCornerEncoding(corner_encoding);
   renderCube();
 }
 
+function resetCubeOrientation() {
+  // 1. find D and reset to position
+  let dPosition = -1;
+  for (let i = 0; i < 6; i++) {
+    if (cube.centers[i].id == 5) {
+      dPosition = i;
+    }
+  }
+
+  switch (dPosition) {
+    case 0:
+      rotateCube("R", 2);
+      break;
+    case 1:
+      rotateCube("L", 1);
+      break;
+    case 2:
+      rotateCube("F", 1);
+      break;
+    case 3:
+      rotateCube("R", 1);
+      break;
+    case 4:
+      rotateCube("B", 1);
+      break;
+  }
+  // 2. find F and reset to position
+  // 1. find D and reset to position
+  let fPosition = -1;
+  for (let i = 1; i < 5; i++) {
+    if (cube.centers[i].id == 1) {
+      dPosition = i;
+    }
+  }
+
+  switch (dPosition) {
+    case 2:
+      rotateCube("U", 1);
+      break;
+    case 3:
+      rotateCube("U", 2);
+      break;
+    case 4:
+      rotateCube("U", 3);
+      break;
+  }
+}
+
 function handleEdgeEncoding(encoding) {
   if (!encoding) {
     return;
@@ -936,7 +985,6 @@ function handleEdgeEncoding(encoding) {
       }
     }
 
-    console.log(target);
     var targetId = target[0];
     var orientation = target[1];
     var tmp = cube.edges[buffer];
@@ -989,7 +1037,6 @@ function handleCornerEncoding(encoding) {
     //var buffer = i%2 == 0 ? 2 : 1;
     buffer = 2;
     var target = targets[encoding.charAt(i)];
-    console.log(target);
     var targetId = target[0];
     var orientation = target[1];
 
@@ -1004,10 +1051,43 @@ function handleCornerEncoding(encoding) {
 
 }
 
+function randomCubeRotation(times) {
+  for (let i = 0; i < times; i++) {
+    randomCubeRotationOnce();
+  }
+}
+
+function randomCubeRotationOnce() {
+  const layers = ["U", "D", "L", "R", "F", "B"];
+  layer = layers[Math.floor(Math.random() * 6)];
+  times = Math.floor(Math.random() * 3)
+  rotateCube(layer, times);
+}
+
 function flipEdge(edge, orientation) {
   edge.orientation = (edge.orientation + orientation) % 2;
 }
 
 function flipCorner(corner, orientation) {
   corner.orientation = (corner.orientation + orientation + 3) % 3;
+}
+
+function testResetCubeOrientation() {
+  randomCubeRotation(3);
+  var center = [];
+  for (let i = 0; i < 6; i++) {
+    center.push(cube.centers[i].id);
+  }
+  resetCubeOrientation();
+  for (let i = 0; i < 6; i++) {
+    if (cube.centers[i].id != i) {
+      currentCenter = [];
+      for (let j = 0; j < 6; j++) {
+        currentCenter.push(cube.centers[j].id);
+      }
+      console.log("wrong position, case:" + center + ", result:" + currentCenter);
+      break;
+    }
+  }
+
 }
\ No newline at end of file
diff --git a/style.css b/style.css
index 0feb8c9dadeadeb76a4e7b8f1fbe35f6b6f1aa19..918dad4e811aa3c8b035a2226d24cbe03a8d8ef8 100644
--- a/style.css
+++ b/style.css
@@ -108,6 +108,11 @@ input {
   width: 70%;
   text-align: center;
 }
+button.orientation {
+  width: 50px;
+  height: 80px;
+  margin: 10px;
+}
 
 
 

From 725524862ac5367b70f6020ebcfd84237232f0a1 Mon Sep 17 00:00:00 2001
From: SansWord <sansword@gmail.com>
Date: Wed, 24 Sep 2025 22:25:06 -0700
Subject: [PATCH] add encoding reminder

---
 index.html | 98 +++++++++++++++++++++++++++++++-------------------------------
 script.js  | 12 ++++----
 style.css  | 15 ++++++++++
 3 files changed, 70 insertions(+), 55 deletions(-)

diff --git a/index.html b/index.html
index 5c94ed3965534f1bd4ce841c5d88b94e0d1355f1..187d3b4fc216473a4b9184131a2f7d2ee8084883 100644
--- a/index.html
+++ b/index.html
@@ -18,9 +18,9 @@
         <td></td>
         <td></td>
         <td></td>
-        <td id="U_C_1" class="up"></td>
-        <td id="U_E_1" class="up"></td>
-        <td id="U_C_2" class="up"></td>
+        <td id="U_C_1" class="up corner">A</td>
+        <td id="U_E_1" class="up edge">A</td>
+        <td id="U_C_2" class="up corner">B</td>
         <td></td>
         <td></td>
         <td></td>
@@ -32,9 +32,9 @@
         <td></td>
         <td></td>
         <td></td>
-        <td id="U_E_4" class="up"></td>
+        <td id="U_E_4" class="up edge">D</td>
         <td id="U_Center"   class="up"></td>
-        <td id="U_E_2" class="up"></td>
+        <td id="U_E_2" class="up edge">B</td>
         <td></td>
         <td></td>
         <td></td>
@@ -46,9 +46,9 @@
         <td></td>
         <td></td>
         <td></td>
-        <td id="U_C_4" class="up"></td>
-        <td id="U_E_3" class="up"></td>
-        <td id="U_C_3" class="up"></td>
+        <td id="U_C_4" class="up corner">D</td>
+        <td id="U_E_3" class="up edge">C</td>
+        <td id="U_C_3" class="up corner buffer">C</td>
         <td></td>
         <td></td>
         <td></td>
@@ -58,57 +58,57 @@
       </tr>
 
       <tr>
-        <td id="L_C_1" class="left"></td>
-        <td id="L_E_1" class="left"></td>
-        <td id="L_C_2" class="left"></td>
-        <td id="F_C_1" class="front"></td>
-        <td id="F_E_1" class="front"></td>
-        <td id="F_C_2" class="front"></td>
-        <td id="R_C_1" class="right"></td>
-        <td id="R_E_1" class="right"></td>
-        <td id="R_C_2" class="right"></td>
-        <td id="B_C_1" class="back"></td>
-        <td id="B_E_1" class="back"></td>
-        <td id="B_C_2" class="back"></td>
+        <td id="L_C_1" class="left corner">I</td>
+        <td id="L_E_1" class="left edge">I</td>
+        <td id="L_C_2" class="left corner">J</td>
+        <td id="F_C_1" class="front corner">E</td>
+        <td id="F_E_1" class="front edge">E</td>
+        <td id="F_C_2" class="front corner">F</td>
+        <td id="R_C_1" class="right corner">Q</td>
+        <td id="R_E_1" class="right edge">Q</td>
+        <td id="R_C_2" class="right corner">R</td>
+        <td id="B_C_1" class="back corner">M</td>
+        <td id="B_E_1" class="back edge">M</td>
+        <td id="B_C_2" class="back corner">N</td>
       </tr>
 
       <tr>
-        <td id="L_E_4" class="left"></td>
+        <td id="L_E_4" class="left edge">L</td>
         <td id="L_Center"   class="left"></td>
-        <td id="L_E_2" class="left"></td>
-        <td id="F_E_4" class="front"></td>
+        <td id="L_E_2" class="left edge">J</td>
+        <td id="F_E_4" class="front edge">H</td>
         <td id="F_Center"   class="front"></td>
-        <td id="F_E_2" class="front"></td>
-        <td id="R_E_4" class="right"></td>
+        <td id="F_E_2" class="front edge">F</td>
+        <td id="R_E_4" class="right edge">T</td>
         <td id="R_Center"   class="right"></td>
-        <td id="R_E_2" class="right"></td>
-        <td id="B_E_4" class="back"></td>
+        <td id="R_E_2" class="right edge">R</td>
+        <td id="B_E_4" class="back edge">P</td>
         <td id="B_Center"   class="back"></td>
-        <td id="B_E_2" class="back"></td>
+        <td id="B_E_2" class="back edge">N</td>
       </tr>
 
       <tr>
-        <td id="L_C_4" class="left"></td>
-        <td id="L_E_3" class="left"></td>
-        <td id="L_C_3" class="left"></td>
-        <td id="F_C_4" class="front"></td>
-        <td id="F_E_3" class="front"></td>
-        <td id="F_C_3" class="front"></td>
-        <td id="R_C_4" class="right"></td>
-        <td id="R_E_3" class="right"></td>
-        <td id="R_C_3" class="right"></td>
-        <td id="B_C_4" class="back"></td>
-        <td id="B_E_3" class="back"></td>
-        <td id="B_C_3" class="back"></td>
+        <td id="L_C_4" class="left corner">L</td>
+        <td id="L_E_3" class="left edge">K</td>
+        <td id="L_C_3" class="left corner">K</td>
+        <td id="F_C_4" class="front corner">H</td>
+        <td id="F_E_3" class="front edge">G</td>
+        <td id="F_C_3" class="front corner">G</td>
+        <td id="R_C_4" class="right corner">T</td>
+        <td id="R_E_3" class="right edge">S</td>
+        <td id="R_C_3" class="right corner">S</td>
+        <td id="B_C_4" class="back corner">P</td>
+        <td id="B_E_3" class="back edge">O</td>
+        <td id="B_C_3" class="back corner">O</td>
       </tr>
 
       <tr>
         <td></td>
         <td></td>
         <td></td>
-        <td id="D_C_1" class="down"></td>
-        <td id="D_E_1" class="down"></td>
-        <td id="D_C_2" class="down"></td>
+        <td id="D_C_1" class="down corner">U</td>
+        <td id="D_E_1" class="down edge buffer">U</td>
+        <td id="D_C_2" class="down corner">V</td>
         <td></td>
         <td></td>
         <td></td>
@@ -121,9 +121,9 @@
         <td></td>
         <td></td>
         <td></td>
-        <td id="D_E_4" class="down"></td>
+        <td id="D_E_4" class="down edge">Y</td>
         <td id="D_Center"   class="down"></td>
-        <td id="D_E_2" class="down"></td>
+        <td id="D_E_2" class="down edge">V</td>
         <td></td>
         <td></td>
         <td></td>
@@ -136,9 +136,9 @@
         <td></td>
         <td></td>
         <td></td>
-        <td id="D_C_4" class="down"></td>
-        <td id="D_E_3" class="down"></td>
-        <td id="D_C_3" class="down"></td>
+        <td id="D_C_4" class="down corner">Y</td>
+        <td id="D_E_3" class="down edge">W</td>
+        <td id="D_C_3" class="down corner">W</td>
         <td></td>
         <td></td>
         <td></td>
@@ -163,7 +163,7 @@
 
       </td>
       <td>
-        
+
   <div id="input">
     <div id="R">
     <button onclick="rotateLayer('R', 1);"> R </button>
diff --git a/script.js b/script.js
index 92a62c47016a23acac412ab8e297aa16cf50c0fc..703238597cc7ad18b1f02b8cfaafe27821704df8 100644
--- a/script.js
+++ b/script.js
@@ -427,7 +427,7 @@ function renderCenters() {
   center_faces = ["U", "F", "R", "B", "L", "D"];
   centers = cube.centers;
   for (var i = centers.length - 1; i >= 0; i--) {
-    getFace(center_faces[i],"Center").classList = cube_definition.centers[centers[i].id].faces[centers[i].orientation]
+    getFace(center_faces[i],"Center").classList.add(cube_definition.centers[centers[i].id].faces[centers[i].orientation]);
   }
 }
 
@@ -468,7 +468,7 @@ function renderEdges() {
     //console.log("--")
     for (var j = 0; j < 2; j ++) {
       //console.log(cube_definition.edges[edges[i].id].faces[(edges[i].orientation + j)%2])
-      getFace(edge_faces[i][j], "E", edge_nums[i][j]).classList = cube_definition.edges[edges[i].id].faces[(edges[i].orientation + j)%2]
+      getFace(edge_faces[i][j], "E", edge_nums[i][j]).classList.add(cube_definition.edges[edges[i].id].faces[(edges[i].orientation + j)%2]);
     }
   }
 }
@@ -504,7 +504,7 @@ function renderCorners() {
       //console.log(cube_definition.corners[corners[i].id].faces[(corners[i].orientation + j)%3])
       var corner = getFace(corner_faces[i][j], "C", corner_nums[i][j]);
       //console.log(corner)
-      corner.classList = cube_definition.corners[corners[i].id].faces[(corners[i].orientation + j)%3]
+      corner.classList.add(cube_definition.corners[corners[i].id].faces[(corners[i].orientation + j)%3]);
     }
   }
 
@@ -804,7 +804,7 @@ function rotateCubeOnce(layer) {
       rotateLayer("U", 3);
       break;
   }
-} 
+}
 
 function resetCube() {
   cube = JSON.parse(JSON.stringify(reset_cube));
@@ -833,7 +833,7 @@ function submitScramble() {
 }
 
 function handleScrambleOperation(operation) {
-  // operation: [UDLRFB]w?[2']? 
+  // operation: [UDLRFB]w?[2']?
   if (operation.length == 1) {
     layer = operation
     var times = 1
@@ -1032,7 +1032,7 @@ function handleCornerEncoding(encoding) {
   }
 
   // swaping 2 and target with orientation
-  
+
   for (var i = 0; i < encoding.length; i++) {
     //var buffer = i%2 == 0 ? 2 : 1;
     buffer = 2;
diff --git a/style.css b/style.css
index 918dad4e811aa3c8b035a2226d24cbe03a8d8ef8..608200a75563603ab2f35199ec1814387bef7b8a 100644
--- a/style.css
+++ b/style.css
@@ -61,6 +61,21 @@ body {
   height: 50px;
   background: var(--rubiks-background);
   border: 1px solid var(--rubiks-background);
+
+  text-align: center;
+}
+
+#cube td.buffer {
+  border: 4px solid magenta;
+}
+
+#cube td.corner {
+  font-size: 30px;
+  font-style: italic;
+}
+
+#cube td.edge {
+  font-size: 30px;
 }
 
 #cube {

From 63f91417cfe88042871fc3ef97bfad56ed2a0446 Mon Sep 17 00:00:00 2001
From: SansWord <sansword@gmail.com>
Date: Wed, 24 Sep 2025 22:37:32 -0700
Subject: [PATCH] update README to sync progress

---
 READ.md | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)

diff --git a/READ.md b/READ.md
index 32084ef255b87443891053c995d5b156e283c897..517b7e3a75e9dba903a08c9c8e75b84d1b77e56f 100644
--- a/READ.md
+++ b/READ.md
@@ -1,6 +1,6 @@
 TODO
 
 0. upload to github page
-1. support Xw action
+1. keep scramble/solution history in local storage
 2. color configurable
 3. buffer configurable
\ No newline at end of file

From f3ab1d660724f530a9d51e2ff87944f91481923a Mon Sep 17 00:00:00 2001
From: SansWord <sansword@gmail.com>
Date: Wed, 24 Sep 2025 23:04:56 -0700
Subject: [PATCH] store pattern/solution history

---
 index.html |  1 +
 script.js  | 49 +++++++++++++++++++++++++++++++++++++++++++++++--
 style.css  |  3 ++-
 3 files changed, 50 insertions(+), 3 deletions(-)

diff --git a/index.html b/index.html
index 187d3b4fc216473a4b9184131a2f7d2ee8084883..e7ff31f270de38d8dfa9d8e2f54b63df7a667645 100644
--- a/index.html
+++ b/index.html
@@ -237,6 +237,7 @@
         />
         <!-- TPDYWVBMEHNH,GOBEIPKR -->
         <button id="submitSolution" class="submit" onclick="submitSolution();"> Submit Solution</button>
+        <button id="hisotry" class="submit" onclick="addToHistory();">Add to History</button>
       </td>
     </tr>
   </table>
diff --git a/script.js b/script.js
index 703238597cc7ad18b1f02b8cfaafe27821704df8..5973ec55b02f07f7ce5ef60d9bb2569e67202552 100644
--- a/script.js
+++ b/script.js
@@ -814,7 +814,7 @@ function resetCube() {
 function submitScramble() {
   const reg = /(?:[LRUDFB]W?2?'?)/gm;
 
-  var scramble = document.getElementById("scramble").value.toUpperCase();
+  var scramble = getScramblePattern();
   console.log("receving scrambe: " + scramble);
   resetCube();
 
@@ -858,7 +858,7 @@ function handleScrambleOperation(operation) {
 }
 
 function submitSolution() {
-  var solution = document.getElementById("solution").value.toUpperCase();
+  var solution = getSolution();
   console.log("receving solution: " + solution);
 
   if (!solution) {
@@ -1089,5 +1089,50 @@ function testResetCubeOrientation() {
       break;
     }
   }
+}
+
+function getScramblePattern() {
+  return document.getElementById("scramble").value.toUpperCase();
+}
+
+function getSolution() {
+  return document.getElementById("solution").value.toUpperCase();
+}
+
+function addToHistory() {
+  var patternHistory = getPatternHistory();
+  var patternToAdd = getScramblePattern();
+  var solutionToAdd = getSolution();
+  for (let i = 0; i < patternHistory.length; i++) {
+    if (patternHistory[i].pattern == patternToAdd
+        && patternHistory[i].solution == solutionToAdd
+      ) {
+      return;
+    }
+  }
+  patternHistory.push(
+    {
+      "time": new Date(),
+      "pattern":getScramblePattern(),
+      "solution":getSolution()
+    }
+  );
+  localStorage.setItem("patternHistory", JSON.stringify(patternHistory))
+}
+
+function getPatternHistory() {
+  var storedHistory = localStorage.getItem("patternHistory");
+  if (!storedHistory) {
+    return [];
+  } else {
+    try {
+      return JSON.parse(storedHistory);
+    } catch (error) {
+      return [];
+    }
+  }
+}
 
+function clearHistory() {
+  localStorage.setItem("patternHistory", "[]");
 }
\ No newline at end of file
diff --git a/style.css b/style.css
index 608200a75563603ab2f35199ec1814387bef7b8a..997341b7c1e960c022aa54aab497fe2a0f1feed1 100644
--- a/style.css
+++ b/style.css
@@ -72,6 +72,7 @@ body {
 #cube td.corner {
   font-size: 30px;
   font-style: italic;
+  color: gray;
 }
 
 #cube td.edge {
@@ -120,7 +121,7 @@ button.submit {
 }
 input {
   font-size: 20px;
-  width: 70%;
+  width: 60%;
   text-align: center;
 }
 button.orientation {
